class Solution {
public:

    int solveRE(vector<int>&prices,int i,int buy,int limit){
        // base case
        if(i >= prices.size() || limit == 0)
            return 0;

        int profit = 0;
        if(buy){
            int buyIt = -prices[i] + solveRE(prices,i+1,0,limit);
            int ignore = 0 + solveRE(prices,i+1,1,limit);
            profit = max(buyIt,ignore);
        }
        else{
            int sellIt = prices[i] + solveRE(prices,i+1,1,limit-1);
            int ignore = 0 + solveRE(prices,i+1,0,limit);
            profit = max(sellIt,ignore);
        }

        return profit;
    }

    int solveTD(vector<int>&prices,int i,int buy,int limit,vector<vector<vector<int>>>&dp){
        // base case
        if(i >= prices.size() || limit == 0)
            return 0;

        if(dp[i][buy][limit] != -1)
            return dp[i][buy][limit];
        

        int profit = 0;
        if(buy){
            int buyIt = -prices[i] + solveTD(prices,i+1,0,limit,dp);
            int ignore = 0 + solveTD(prices,i+1,1,limit,dp);
            profit = max(buyIt,ignore);
        }
        else{
            int sellIt = prices[i] + solveTD(prices,i+1,1,limit-1,dp);
            int ignore = 0 + solveTD(prices,i+1,0,limit,dp);
            profit = max(sellIt,ignore);
        }

        dp[i][buy][limit] = profit;
        return profit;
    }

    int solveBU(vector<int>&prices,vector<vector<vector<int>>>&dp){

        for(int i = prices.size()-1;i >= 0;i--){
            for(int buy = 0;buy < 2;buy++){
                for(int limit = 1;limit < 3;limit++){
                    int profit = 0;
                    if(buy){
                        int buyIt = -prices[i] + dp[i+1][0][limit];
                        int ignore = 0 + dp[i+1][1][limit];
                        profit = max(buyIt,ignore);
                    }
                    else{
                        int sellIt = prices[i] + dp[i+1][1][limit-1];
                        int ignore = 0 + dp[i+1][0][limit];
                        profit = max(sellIt,ignore);
                    }

                    dp[i][buy][limit] = profit;
                }
            }
        }

        return dp[0][1][2];
    }


    int solveSO(vector<int>&prices,vector<vector<vector<int>>>&dp){

        for(int i = prices.size()-1;i >= 0;i--){
            for(int buy = 0;buy < 2;buy++){
                for(int limit = 1;limit < 3;limit++){
                    int profit = 0;
                    if(buy){
                        int buyIt = -prices[i] + dp[1][0][limit];
                        int ignore = 0 + dp[1][1][limit];
                        profit = max(buyIt,ignore);
                    }
                    else{
                        int sellIt = prices[i] + dp[1][1][limit-1];
                        int ignore = 0 + dp[1][0][limit];
                        profit = max(sellIt,ignore);
                    }

                    dp[0][buy][limit] = profit;
                }
            }
            // shifiting
            dp[1] = dp[0];
        }

        return dp[0][1][2];
    }

    int maxProfit(vector<int>& prices) {
        // // using Recursion
        // return solveRE(prices,0,1,2);

        // // using Memoisation - (3-var changing, 3-D dp)
        // vector<vector<vector<int>>> dp(prices.size(),vector<vector<int>>(2,vector<int>(3,-1)));
        // return solveTD(prices,0,1,2,dp);

        // // using Tabulation
        // vector<vector<vector<int>>> dp(prices.size()+1,vector<vector<int>>(2,vector<int>(3,0)));
        // return solveBU(prices,dp);

        // // using Space Optimization
        vector<vector<vector<int>>> dp(2,vector<vector<int>>(2,vector<int>(3,0)));
        return solveSO(prices,dp);


    }
};

