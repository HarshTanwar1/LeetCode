class Solution {
public:

    int solveRec(string&a,string&b,int i,int j){
        // Base case
        if(i == a.length())
            return b.length() - j;

        if(j == b.length())
            return a.length() - i;

        // recursion logic
        int ans = 0;
        if(a[i] == b[j]){
            ans = solveRec(a,b,i+1,j+1);
        }
        else{
            int insertOp = 1 + solveRec(a,b,i,j+1);
            int deleteOp = 1 + solveRec(a,b,i+1,j);
            int replaceOp = 1 + solveRec(a,b,i+1,j+1);

            ans = min(insertOp, min(deleteOp,replaceOp));
        }

        return ans;
    }

    int solveMem(string&a,string&b,int i,int j, vector<vector<int> >&dp){
        if(i == a.length())
            return b.length() - j;

        if(j == b.length())
            return a.length() - i;

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        // recursion logic
        int ans = 0;
        if(a[i] == b[j]){
            ans = solveMem(a,b,i+1,j+1,dp);
        }
        else{
            int insertOp = 1 + solveMem(a,b,i,j+1,dp);
            int deleteOp = 1 + solveMem(a,b,i+1,j,dp);
            int replaceOp = 1 + solveMem(a,b,i+1,j+1,dp);

            ans = min(insertOp, min(deleteOp,replaceOp));
        }

        dp[i][j] = ans;
        return dp[i][j];
    }


    int solveTab(string&a,string&b){
        vector<vector<int> > dp(a.length()+1,vector<int>(b.length()+1,0));

        for(int j = 0;j<b.length();j++){
            dp[a.length()][j] = b.length() - j;
        }

        for(int i = 0;i<a.length();i++){
            dp[i][b.length()] = a.length() - i;
        }

        for(int i = a.length()-1;i>=0;i--){
            for(int j = b.length()-1;j>=0;j--){
                int ans = 0;
                if(a[i] == b[j]){
                    ans = dp[i+1][j+1];
                }
                else{
                    int insertOp = 1 + dp[i][j+1];
                    int deleteOp = 1 + dp[i+1][j];
                    int replaceOp = 1 + dp[i+1][j+1];

                    ans = min(insertOp, min(deleteOp,replaceOp));
                }

                dp[i][j] = ans;
            }
        }

        return dp[0][0];
    }


    int solveTabSO(string&a,string&b){
        vector<int> next(b.length()+1,0);
        vector<int> curr(b.length()+1,0);

        for(int j = 0;j<b.length();j++){
            next[j] = b.length() - j;
        }

        for(int i = a.length()-1;i>=0;i--){
            curr[b.length()] = a.length() - i;
            for(int j = b.length()-1;j>=0;j--){
                int ans = 0;
                if(a[i] == b[j]){
                    ans = next[j+1];
                }
                else{
                    int insertOp = 1 + curr[j+1];
                    int deleteOp = 1 + next[j];
                    int replaceOp = 1 + next[j+1];

                    ans = min(insertOp, min(deleteOp,replaceOp));
                }

                curr[j] = ans;
            }
            // shifting
            next = curr;
        }

        return curr[0];
    }

    int minDistance(string word1, string word2) {
        // Base Case 
        if(word1.length() == 0)
            return word2.length();

        if(word2.length() == 0)
            return word1.length();
        
        int i = 0, j = 0;
        // return solveRec(word1,word2,i,j);

        // vector<vector<int> > dp(word1.length()+1,vector<int>(word2.length()+1,-1));
        // return solveMem(word1,word2,i,j,dp);

        // return solveTab(word1,word2);

        return solveTabSO(word1,word2);


    }
};
