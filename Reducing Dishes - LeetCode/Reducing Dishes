class Solution {
public:

    int solveRE(vector<int>&sat,int i,int time){
        if(i >= sat.size()) return 0;

        int includeLikeTime = time*sat[i] + solveRE(sat,i+1,time+1);
        int excludeLikeTime = 0 + solveRE(sat,i+1,time);
        return max(includeLikeTime,excludeLikeTime);
    }


    int solveMem(vector<int>&sat,int i,int time,vector<vector<int>>&dp){
        if(i >= sat.size()) return 0;

        if(dp[i][time] != -1)  
            return dp[i][time];

        int includeLikeTime = time*sat[i] + solveMem(sat,i+1,time+1,dp);
        int excludeLikeTime = 0 + solveMem(sat,i+1,time,dp);
        dp[i][time] = max(includeLikeTime,excludeLikeTime);
        return dp[i][time];
    }

    int solveTab(vector<int>&sat){
        vector<vector<int>> dp(sat.size()+1,vector<int>(sat.size()+2,0));

        for(int i = sat.size()-1;i >= 0;i--){
            for(int time = sat.size();time >= 1;time--){
                int includeLikeTime = time*sat[i] + dp[i+1][time+1];
                int excludeLikeTime = 0 + dp[i+1][time];
                dp[i][time] = max(includeLikeTime,excludeLikeTime);
            }
        }
        return dp[0][1];
    }

    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        
        // return solveRE(satisfaction,0,1);

        // vector<vector<int>> dp(satisfaction.size()+1,vector<int>(satisfaction.size()+1,-1));
        // return solveMem(satisfaction,0,1,dp);

        return solveTab(satisfaction);
    }
};
