class TrieNode{
  public:
    char data;
    TrieNode* children[26];
    bool isTerminal;
    int countChild;

    TrieNode(char d){
      data = d;
      for(int i=0;i<26;i++){
        children[i] = NULL;
      }
      isTerminal = false;
      countChild = 0;
    }
};



class Solution {
public:
    void insertWord(TrieNode* root ,string word){
    if(word.length() == 0){
        root->isTerminal = true;
        return;
    }

    char ch = word[0];
    int index = ch - 'a';
    TrieNode* child;

    if(root->children[index] != NULL){
        child = root->children[index];
    }
    else{
        child = new TrieNode(ch);
        root->children[index] = child;
        root->countChild++;
    }

    insertWord(child,word.substr(1));
    }

    void findLCP(string &ans,TrieNode* root,string word){
        // this line you might forget 
        if(root->isTerminal){
            return ;
        }

        for(int i = 0;i<word.length();i++){
            char ch = word[i];
            if(root->countChild == 1){
                ans.push_back(ch);
                int index = ch - 'a';
                root = root->children[index];
            }
            else{
                break;
            }

            if(root->isTerminal){
                break;
            }

        }
        
    }

    string longestCommonPrefix(vector<string>& strs) {
        TrieNode* root = new TrieNode('-');
        for(int i = 0;i<strs.size();i++){
            insertWord(root,strs[i]);
        }

        string ans = "";
        string word = strs[0];
        findLCP(ans, root, word);
        return ans;
    }
};










