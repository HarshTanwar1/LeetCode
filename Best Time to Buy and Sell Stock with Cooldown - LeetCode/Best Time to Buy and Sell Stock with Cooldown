class Solution {
public:
    
    // BY RECURSION
    int stockProfit(vector<int>&prices,int i,int buy){
        // Base Condition
        if(i >= prices.size())
            return 0;

        int profit = 0;
        if(buy){
            int buyProfit = -prices[i] + stockProfit(prices,i+1,0); // this rec. give sell price
            int buyIgnore = 0 + stockProfit(prices,i+1,1);
            profit = max(buyProfit,buyIgnore);
        }
        else{
            int sellProfit = prices[i] + stockProfit(prices,i+2,1); // this rec. gives buy price
            int sellIgnore = stockProfit(prices,i+1,0);
            profit = max(sellProfit,sellIgnore);
        }

        return profit;
    }

    // BY MEMOISATION
    int stockProfitMem(vector<int>& prices,int i,int buy,vector<vector<int> >&dp){
        // Base Condition
        if(i >= prices.size())
            return 0;

        if(dp[i][buy] != -1)
            return dp[i][buy];

        int profit = 0;
        if(buy){
            int buyProfit = -prices[i] + stockProfitMem(prices,i+1,0,dp); // this rec. give sell price
            int buyIgnore = 0 + stockProfitMem(prices,i+1,1,dp);
            profit = max(buyProfit,buyIgnore);
        }
        else{
            int sellProfit = prices[i] + stockProfitMem(prices,i+2,1,dp); // this rec. gives buy price
            int sellIgnore = stockProfitMem(prices,i+1,0,dp);
            profit = max(sellProfit,sellIgnore);
        }

        dp[i][buy] = profit;
        return dp[i][buy];
    }

    int stockProfitTab(vector<int>& prices,vector<vector<int> >& dp){
        for(int i = prices.size()-1;i >= 0;i--){
            for(int buy = 0;buy < 2;buy++){
                int profit = 0;
                if(buy){
                    int buyProfit = -prices[i] + dp[i+1][0]; // this rec. give sell price
                    int buyIgnore = 0 + dp[i+1][1];
                    profit = max(buyProfit,buyIgnore);
                }
                else{
                    int sellProfit = prices[i] + dp[i+2][1]; // this rec. gives buy price
                    int sellIgnore = dp[i+1][0];
                    profit = max(sellProfit,sellIgnore);
                }

                dp[i][buy] = profit;
            }
        }

        return dp[0][1];
    }


    int maxProfit(vector<int>& prices) {
        // // method - 1
        // return stockProfit(prices,0,true);

        // // method - 2
        // vector<vector<int> > dp(prices.size()+1,vector<int>(2,-1));
        // return stockProfitMem(prices,0,true,dp);

        // // method - 3
        vector<vector<int> > dp(prices.size()+2,vector<int>(2,0));
        return stockProfitTab(prices,dp);

    }
};
