class Solution {
public:

    int solveRE(vector<int>& arr1, vector<int>& arr2,int prev,int i){
        if(i >= arr1.size()) return 0;

        int op1 = 1000000000;
        if(prev < arr1[i]){
            op1 = solveRE(arr1,arr2,arr1[i],i+1);
        }

        int op2 = 1000000000;
        auto it = upper_bound(arr2.begin(),arr2.end(),prev);
        if(it != arr2.end()){
            int index = it - arr2.begin();
            // arr1[i] = arr2[index]; I don't wanna change original array so i pass arr2[index]
            op2 = 1 + solveRE(arr1,arr2,arr2[index],i+1);
        }
        return min(op1,op2);
    }

    
    int solveMem(vector<int>& arr1, vector<int>& arr2,int prev,int i,map<pair<int,int>,int>&dp){
        if(i >= arr1.size()) return 0;
        if(dp.find({prev,i}) != dp.end()) return dp[{prev,i}];

        int op1 = 1000000000;
        if(prev < arr1[i]){
            op1 = solveMem(arr1,arr2,arr1[i],i+1,dp);
        }

        int op2 = 1000000000;
        auto it = upper_bound(arr2.begin(),arr2.end(),prev);
        if(it != arr2.end()){
            int index = it - arr2.begin();
            op2 = 1 + solveMem(arr1,arr2,arr2[index],i+1,dp);
        }
        return dp[{prev,i}] = min(op1,op2);
    }

    

    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        sort(arr2.begin(),arr2.end());
        // int ans = solveRE(arr1,arr2,-1,0);
        // return ans == 1000000000 ? -1 : ans;


        // // By Memoisation
        map<pair<int,int>,int> dp;
        int ans = solveMem(arr1,arr2,-1,0,dp);
        return ans == 1000000000 ? -1 : ans;
    }
};
