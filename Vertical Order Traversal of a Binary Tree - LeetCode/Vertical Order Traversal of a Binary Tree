/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int> > ans;
        queue<pair<TreeNode*,pair<int,int>>> q;
        q.push({root,{0,0}});
        map<int,map<int,multiset<int>>>mp;
        
        while(!q.empty()){
            auto temp = q.front();
            q.pop();
            TreeNode*& frontNode = temp.first;
            auto coordinate = temp.second;
            int&row = coordinate.first;
            int&col = coordinate.second;
            mp[col][row].insert(frontNode->val);
            if(frontNode->left){
                q.push({frontNode->left,{row+1,col-1}});
            }
            if(frontNode->right){
                q.push({frontNode->right,{row+1,col+1}});
            }
        }

        for(auto it : mp){
            auto& rowit = it.second;
            vector<int> vLine;
            for(auto rit : rowit){
                auto& NodesData = rit.second;
                vLine.insert(vLine.end(),NodesData.begin(),NodesData.end());
            }
            ans.push_back(vLine);
        }
        return ans;
    }
};
