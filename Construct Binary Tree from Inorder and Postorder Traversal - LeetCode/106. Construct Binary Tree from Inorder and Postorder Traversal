/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int findIndex(vector<int>& arr,int size,int ele){
        for(int i=0;i<size;++i){
            if(arr[i] == ele){
                return i;
            }
        }
        return -1;
    }


    TreeNode* BuildTreeHelper(vector<int>& inorder, vector<int>& postorder,int size,int& postIndex,int inStart,int inEnd){
        // Base case
        if(postIndex < 0 || inStart > inEnd){
            return NULL;
        }

        int ele = postorder[postIndex--];
        TreeNode* root = new TreeNode(ele);
        int pos = findIndex(inorder,size,ele);

        // right subtree
        root->right = BuildTreeHelper(inorder,postorder,size,postIndex,pos+1,inEnd); 

        // left subtree
        root->left = BuildTreeHelper(inorder,postorder,size,postIndex,inStart,pos-1);

        // returning root
        return root;
    }


    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int size = inorder.size();
        int postIndex = size-1;
        int inStart = 0;
        int inEnd = size-1;
        return BuildTreeHelper(inorder,postorder,size,postIndex,inStart,inEnd);
    }
};
