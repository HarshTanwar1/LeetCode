class Solution {
public:

    bool isSafe(vector<vector<char>>&board,int row,int col,char value){
        int n = board[0].size();

        for(int i = 0;i<n;i++){
            //check for rows
            if(board[row][i] == value)
            return false;

            //check for columns
            if(board[i][col] == value)
            return false;

            //check for 3x3 block
            if(board[3*(row/3) + (i/3)][3*(col/3) + (i%3)] == value)
            return false;
        }

        return true;
    }


    bool solve(vector<vector<char>>&board){
        // traverse on complete board
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                // check cell is empty or not
                if(board[i][j] == '.'){
                    for(char value = '1';value <= '9';value++){
                        if(isSafe(board,i,j,value)){
                            board[i][j] = value;
                            bool furtherSolution = solve(board);
                            if(furtherSolution){
                                return true;
                            }
                            else{
                                //Backtrack (board is not solve)
                                board[i][j] = '.';
                            }
                        }
                    }
                    // 1-9 there is no char which fit in the cell
                    return false;
                }
            }
        }
        // sudoku is completely filled
        return true;
    }

    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
