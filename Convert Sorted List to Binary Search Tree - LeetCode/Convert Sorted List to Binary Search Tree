/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int countNodes(ListNode*head){
        ListNode* temp = head;
        int count = 0;
        while(temp != NULL){
            ++count;
            temp = temp->next;
        }
        return count;
    }

    TreeNode* convert(ListNode*&head,int n){
        // Base Case
        if(head==NULL || n<=0){
            return NULL;
        }

        // Left Subtree
        TreeNode* leftST = convert(head,n/2);

        // current Node
        TreeNode* root = new TreeNode(head->val);
        root->left = leftST;
        head = head->next;

        // Right Subtree
        root->right = convert(head,n-1-n/2);
        
        return root;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        if(!head)
            return NULL;
        int n = countNodes(head);
        TreeNode* root = convert(head,n);

        return root;
    }
};
