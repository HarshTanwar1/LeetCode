class Solution {
public:
#define ll long long
    long long minimumDifference(vector<int>& nums) {
        int n = nums.size()/3;

        vector<ll> prefix(nums.size(),-1),suffix(nums.size(),-1);

        // for prefix array
        ll sum = 0;
        priority_queue<ll> pq;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            pq.push(nums[i]);

            if(n < pq.size()){
                sum -= pq.top();
                pq.pop();
            }
            if(n == pq.size()){
                prefix[i] = sum;
            }
        }

        // for suffix array
        sum = 0;
        priority_queue<ll,vector<ll>,greater<ll>> pq2;
        for(int i=nums.size()-1;i>=0;i--){
            sum += nums[i];
            pq2.push(nums[i]);

            if(n < pq2.size()){
                sum -= pq2.top();
                pq2.pop();
            }
            if(n == pq2.size()){
                suffix[i] = sum;
            }
        }


        ll ans = LONG_LONG_MAX;
        for(int i = n-1;i<2*n;i++){
            ans = min(ans,prefix[i]-suffix[i+1]);
        }
        return ans;
    }
};
