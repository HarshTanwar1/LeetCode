class Solution {
public:
    // BY RECURSION
    int minCost(vector<int>&days,vector<int>&costs,int i){
        // Base Condition
        if(i >= days.size())
            return 0;

        // Recursive solution
        // cost for 1 day
        int cost1 = costs[0] + minCost(days,costs,i+1);

        // cost for 7 day
        int endOfDay = days[i] + 7 - 1;
        int j = i;
        while(j < days.size() && days[j] <= endOfDay){
            ++j;
        }
        int cost7 = costs[1] + minCost(days,costs,j);

        // cost for 30 days
        endOfDay = days[i] + 30 - 1;
        j = i;
        while(j < days.size() && days[j] <= endOfDay){
            ++j;
        }
        int cost30 = costs[2] + minCost(days,costs,j);


        return min(cost1,min(cost7,cost30));
    }


    // BY DP - MEMOISATION
    int minCostMem(vector<int>&days,vector<int>&costs,int i,vector<int>&dp){
        // Base Condition
        if(i >= days.size())
            return 0;


        if(dp[i] != -1){
            return dp[i];
        }

        // Recursive solution
        // cost for 1 day
        int cost1 = costs[0] + minCostMem(days,costs,i+1,dp);

        // cost for 7 day
        int endOfDay = days[i] + 7 - 1;
        int j = i;
        while(j < days.size() && days[j] <= endOfDay){
            ++j;
        }
        int cost7 = costs[1] + minCostMem(days,costs,j,dp);

        // cost for 30 days
        endOfDay = days[i] + 30 - 1;
        j = i;
        while(j < days.size() && days[j] <= endOfDay){
            ++j;
        }
        int cost30 = costs[2] + minCostMem(days,costs,j,dp);


        dp[i] = min(cost1,min(cost7,cost30));
        return dp[i];
    }

    // BY DP - TABULATION
    int minCostTab(vector<int>&days,vector<int>&costs,int i,vector<int>&dp){
        // Base Condition
        dp[days.size()] = 0;

        for(int i = days.size()-1;i>=0;i--){
            // Recursive solution
            // cost for 1 day
            int cost1 = costs[0] + dp[i+1];

            // cost for 7 day
            int endOfDay = days[i] + 7 - 1;
            int j = i;
            while(j < days.size() && days[j] <= endOfDay){
                ++j;
            }
            int cost7 = costs[1] + dp[j];

            // cost for 30 days
            endOfDay = days[i] + 30 - 1;
            j = i;
            while(j < days.size() && days[j] <= endOfDay){
                ++j;
            }
            int cost30 = costs[2] + dp[j];


            dp[i] = min(cost1,min(cost7,cost30));
        }
        return dp[i];
    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
        // // method - 1
        // return minCost(days,costs,0);

        // // method - 2
        // vector<int> dp(days.size()+1,-1);
        // return minCostMem(days,costs,0,dp);

        // // method - 3
        vector<int> dp(days.size()+1,0);
        return minCostTab(days,costs,0,dp);
    }
};
