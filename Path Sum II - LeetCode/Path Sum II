/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void solve(TreeNode* root, int targetSum,vector<vector<int>>&ans,int&currSum,vector<int>&path){
        // NULL node
        if(root == NULL)
        return;

        // Leaf Node
        if(root->left==NULL && root->right==NULL){
            path.push_back(root->val);
            currSum += root->val;
            if(currSum == targetSum){
                ans.push_back(path);
            }
            path.pop_back();
            currSum -= root->val;
            return;
        }

        // Rest of all Nodes
        path.push_back(root->val);
        currSum += root->val;

        // left call
        solve(root->left,targetSum,ans,currSum,path);
        // right call
        solve(root->right,targetSum,ans,currSum,path);

        // Backtrack
        path.pop_back();
        currSum -= root->val;
    }


    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int> > ans;
        int currSum = 0;
        vector<int> temp;

        solve(root,targetSum,ans,currSum,temp);

        return ans;
    }
};
