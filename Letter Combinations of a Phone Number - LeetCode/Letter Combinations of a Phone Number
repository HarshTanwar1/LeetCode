class Solution {
public:

    void combinations(vector<string>&ans,string output,int index,string digits, unordered_map <int,string> &  mapping){
        // base case
        if(index >= digits.length()){
            ans.push_back(output);
            return;
        }

        int digit = digits[index] - '0';
        string str = mapping[digit];
        for(int i = 0;i < str.size();i++){
            //include
            output.push_back(str[i]);
            //RE
            combinations(ans,output,index+1,digits,mapping);
            //Bactracking
            output.pop_back();
        }
    }


    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        if(digits.size() == 0)
        return ans;

        string output;
        int index = 0;

        unordered_map <int,string> mapping;
        mapping[2] = "abc";
        mapping[3] = "def";
        mapping[4] = "ghi";
        mapping[5] = "jkl";
        mapping[6] = "mno";
        mapping[7] = "pqrs";
        mapping[8] = "tuv";
        mapping[9] = "wxyz";

        combinations(ans,output,index,digits,mapping);

        return ans;
    }
};
