class Solution {
public:

    int MOD = 1000000007;

    int SolveUsingRec(int n,int k,int target){
        // Base cases
        if(n < 0)
            return 0;

        if(n == 0 && target == 0)
            return 1;

        if(n == 0 && target != 0)
            return 0;

        if(n != 0 && target == 0)
            return 0;

        // Approach
        int ans = 0;
        for(int i = 1;i<=k;i++){
            ans += SolveUsingRec(n-1,k,target-i);
        }
        return ans;
    }


    int SolveUsingMemo(int n,int k,int target,vector<vector<int> >&dp){
        // Base cases
        if(n < 0)
            return 0;

        if(n == 0 && target == 0)
            return 1;

        if(n == 0 && target != 0)
            return 0;

        if(n != 0 && target == 0)
            return 0;


        if(dp[n][target] != -1)
            return dp[n][target];


        // Approach
        int ans = 0;
        for(int i = 1;i<=k;i++){
            // Check the base condition before passing as argument
            if(target - i >= 0)
                ans = (ans%MOD + SolveUsingMemo(n-1,k,target-i,dp)%MOD) % MOD;
        }
        
        dp[n][target] = ans;
        return dp[n][target];
    }


    int SolveUsingTabulation(int n,int k,int target){
        vector<vector<int> > dp(n+1,vector<int>(target+1,0));
        dp[0][0] = 1;

        // Approach
        for(int index = 1;index<=n;index++){
            for(int t = 1;t<=target;t++){
                
                int ans = 0;
                for(int i = 1;i<=k;i++){
                    if(t - i >= 0)
                        ans = (ans%MOD + dp[index-1][t-i]%MOD) % MOD;
                }
                dp[index][t] = ans;
            }
        }

        return dp[n][target];
    }

    int SolveUsingTabulationSO(int n,int k,int target){
        vector<vector<int> > dp(n+1,vector<int>(target+1,0));
        vector<int> prev(target+1,0);
        vector<int> curr(target+1,0);

        prev[0] = 1;

        // Approach
        for(int index = 1;index<=n;index++){
            for(int t = 1;t<=target;t++){
                
                int ans = 0;
                for(int i = 1;i<=k;i++){
                    if(t - i >= 0)
                        ans = (ans%MOD + prev[t-i]%MOD) % MOD;
                }
                curr[t] = ans;
            }
            // shifting
            prev = curr;
        }

        return prev[target];
    }


    int numRollsToTarget(int n, int k, int target) {
        // int ans = SolveUsingRec(n,k,target);
        // return ans;

        // vector<vector<int> > dp(n+1,vector<int>(target+1,-1));
        // int ans = SolveUsingMemo(n,k,target,dp);
        // return ans;

        // int ans = SolveUsingTabulation(n,k,target);
        // return ans;

        int ans = SolveUsingTabulationSO(n,k,target);
        return ans;
    }
};
