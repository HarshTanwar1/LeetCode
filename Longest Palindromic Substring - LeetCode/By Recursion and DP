class Solution {
public:

    int maxLength = 1, start = 0;

    bool solveRE(string&s,int i,int j){
        if(i >= j)
            return true;

        bool flag = false;
        if(s[i] == s[j]){
            flag = solveRE(s,i+1,j-1);
        }

        if(flag){
            int currLength = j-i+1;
            if(currLength > maxLength){
                maxLength = currLength;
                start = i;
            }
        }
        return flag;
    }

    bool solveMem(string&s,int i,int j, vector<vector<int>>&dp){
        if(i >= j)
            return true;

        if(dp[i][j] != -1)
            return dp[i][j];

        bool flag = false;
        if(s[i] == s[j]){
            flag = solveMem(s,i+1,j-1,dp);
        }

        if(flag){
            int currLength = j-i+1;
            if(currLength > maxLength){
                maxLength = currLength;
                start = i;
            }
        }

        return dp[i][j] = flag;
    }

    string longestPalindrome(string s) {
        int n = s.size();

        // for(int i=0;i<n;i++){
        //     for(int j=i;j<n;j++){
        //         bool storeCheck = solveRE(s,i,j);
        //     }
        // }
        // return s.substr(start,maxLength);

        vector<vector<int>> dp(s.length(),vector<int>(s.length(),-1));
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                bool storeCheck = solveMem(s,i,j,dp);
            }
        }
        return s.substr(start,maxLength);
    }
};
