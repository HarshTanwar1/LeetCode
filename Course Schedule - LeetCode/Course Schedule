class Solution {
private:
    bool TopoLogicalSort(unordered_map<int,list<int>> &adjList, int n){
        // Building inorder lists
        unordered_map<int,int> inorder;
        queue<int> q;
        vector<int> ans;
        for(auto i : adjList){
            int src = i.first;
            for(auto nbr : i.second){
                inorder[nbr]++;
            }
        }

        // inserting those elements which have 0 indegree
        for(int i = 0;i < n;i++){
            // As numCourses are labeled frm 0 to numcourses-1
            if(inorder[i] == 0){
                q.push(i);
            }
        }

        while(!q.empty()){
            int ftNode = q.front();
            q.pop();
            ans.push_back(ftNode);

            for(auto nbr : adjList[ftNode]){
                inorder[nbr]--;
                if(inorder[nbr] == 0){
                    q.push(nbr);
                }
            }
        }

        // check whether we get a valid topoSort or not(it shows the cycle is there or not)
        if(ans.size() == n){
            // No cycle is there, it canFinish
            return true;
        }

        // cycle is there, it can't Finish
        return false;
    }


public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        // Building adjancy list
        unordered_map<int,list<int>> adjList;
        for(auto i : prerequisites){
            int u = i[0];
            int v = i[1];
            adjList[v].push_back(u);
        }

        bool validTopoSort = TopoLogicalSort(adjList,numCourses);
        return validTopoSort;
    }
};
