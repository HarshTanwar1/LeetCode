/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<TreeNode*> solveRE(int start,int end){
        // Base Case 
        if(start > end)
            return {0};
        if(start == end)
            return {new TreeNode(start)};

        vector<TreeNode*>ans;
        for(int i = start;i <= end;i++){
            vector<TreeNode*>left = solveRE(start,i-1);
            vector<TreeNode*>right = solveRE(i+1,end);

            for(int j = left.size()-1;j >= 0;j--){
                for(int k = right.size()-1;k >= 0;k--){
                    TreeNode* root = new TreeNode(i);
                    root->left = left[j];
                    root->right = right[k];
                    ans.push_back(root);
                }
            }
        }

        return ans;
    }

    // global declaration of map
    map<pair<int,int>,vector<TreeNode*>> dp;
    
    vector<TreeNode*> solveMem(int start,int end){
        // Base Case 
        if(start > end)
            return {0};
        if(start == end)
            return {new TreeNode(start)};

        if(dp.find({start,end}) != dp.end())
            return dp[{start,end}];

        vector<TreeNode*>ans;
        for(int i = start;i <= end;i++){
            vector<TreeNode*>left = solveMem(start,i-1);
            vector<TreeNode*>right = solveMem(i+1,end);

            for(int j = 0;j < left.size();j++){
                for(int k = 0;k < right.size();k++){
                    TreeNode* root = new TreeNode(i);
                    root->left = left[j];
                    root->right = right[k];
                    ans.push_back(root);
                }
            }
        }

        return dp[{start,end}] = ans;
    }

    vector<TreeNode*> generateTrees(int n) {
        if(n == 0)
            return {};
        
        // // By Recursion
        // return solveRE(1,n);

        // By Memoisation
        return solveMem(1,n);
    }
};
