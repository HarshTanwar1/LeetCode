class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<pair<int,int>,int> >q;
        int ansTime = 0;
        int countFreshOranges = 0;

        // inserting all rotten oranges
        for(int i = 0;i < grid.size();++i){
            for (int j = 0;j < grid[0].size();++j){
                if(grid[i][j] == 1){
                    ++countFreshOranges;
                }
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                }
            }
        }


        while(!q.empty()){
            auto ftNode = q.front();
            q.pop();

            int x = ftNode.first.first;
            int y = ftNode.first.second;
            int time = ftNode.second;

            int dx[] = {-1,0,1,0};
            int dy[] = {0,1,0,-1};

            for(int i = 0;i < 4;++i){
                int newX = x + dx[i];
                int newY = y + dy[i];
                if(newX >= 0 && newY >= 0 && newX < grid.size() && newY < grid[0].size()
                && grid[newX][newY] == 1){
                    q.push({{newX,newY},time+1});
                    ansTime = max(ansTime,time+1);
                    grid[newX][newY] = 2;
                    --countFreshOranges;
                }
            }

        }

        if(countFreshOranges > 0)
            return -1;
        
        // // // SECOND METHOD TO CHECK FRESH ORANGES ARE THERE OR NOT...
        // // check is there any fresh orange left or not
        // for(int i = 0;i < grid.size();++i){
        //     for(int j = 0;j < grid[0].size();++j){
        //         if(grid[i][j] == 1){
        //             return -1;
        //         }
        //     }
        // }

        return ansTime;
    }
};
