class Solution {
public:
    int solveRec(string&a, string&b,int i,int j){
        // Base case
        if(i >= a.size()){
            return 0;
        }
        if(j >= b.size()){
            return 0;
        }

        // logic
        int ans = 0;
        if(a[i] == b[j]){
            ans = 1 + solveRec(a,b,i+1,j+1);
        }
        else{
            ans = 0 + max(solveRec(a,b,i+1,j) , solveRec(a,b,i,j+1));
        }
        return ans;
    }


    int solveMem(string&a, string&b,int i,int j,vector<vector<int> >&dp){
        if(i >= a.size()){
            return 0;
        }
        if(j >= b.size()){
            return 0;
        }

        if(dp[i][j] != -1)
            return dp[i][j];

        // logic
        int ans = 0;
        if(a[i] == b[j]){
            ans = 1 + solveMem(a,b,i+1,j+1,dp);
        }
        else{
            ans = 0 + max(solveMem(a,b,i+1,j,dp) , solveMem(a,b,i,j+1,dp));
        }
        
        dp[i][j] = ans;
        return dp[i][j];
    }


    int solveTab(string&a, string&b){
        vector<vector<int> > dp(a.length()+1,vector<int>(b.length()+1,0));

        for(int row = a.length()-1;row >= 0;row--){
            for(int col = b.length()-1;col >= 0;col--){
                int ans = 0;
                if(a[row] == b[col]){
                    ans = 1 + dp[row+1][col+1];
                }
                else{
                    ans = 0 + max(dp[row][col+1],dp[row+1][col]);
                }
                
                dp[row][col] = ans;
            }
        }

        return dp[0][0];
    }

    
    int solveTabSO(string&a, string&b){
        // vector<vector<int> > dp(a.length()+1,vector<int>(b.length()+1,0));
        vector<int> next(b.length()+1,0);
        vector<int> curr(b.length()+1,0);

        for(int row = a.length()-1;row >= 0;row--){
            for(int col = b.length()-1;col >= 0;col--){
                int ans = 0;
                if(a[row] == b[col]){
                    ans = 1 + next[col+1];
                }
                else{
                    ans = 0 + max(curr[col+1],next[col]);
                }
                
                curr[col] = ans;
            }
            // shifting(i am going upward so i have to do this)
            next = curr;
        }

        return curr[0];
    }


    int longestCommonSubsequence(string text1, string text2) {
        int i = 0, j = 0;
        // return solveRec(text1,text2,i,j);


        int n1 = text1.length(), n2 = text2.length();
        // vector<vector<int> > dp(n1+1,vector<int>(n2+1,-1));
        // return solveMem(text1,text2,i,j,dp);

        // return solveTab(text1,text2);

        return solveTabSO(text1,text2);
    }
};
