/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int maxValue(TreeNode*&root){
        if(root == NULL){
            return -1;
        }
        
        TreeNode* temp = root;
        while(temp->right != NULL){
            temp = temp->right;
        }
        
        return temp->val;
    }



    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == nullptr)
            return NULL;
            
        if(root->val == key){
            // 4 cases
            if(!root->left && !root->right){
                delete root;
                return NULL;
            }
            
            else if(root->left == NULL && root->right != NULL){
                TreeNode* child = root->right;
                delete root;
                return child;
            }
            
            else if(root->left != NULL && root->right == NULL){
                TreeNode* child = root->left;
                delete root;
                return child;
            }
            
            else{
                int pred = maxValue(root->left);
                root->val = pred;
                root->left = deleteNode(root->left,pred);
            }
            
        }
        else if(root->val < key){
            root->right = deleteNode(root->right,key);
        }
        else{
            root->left = deleteNode(root->left,key);
        }
        return root;
    }
};
