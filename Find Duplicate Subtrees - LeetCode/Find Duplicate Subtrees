class Solution {
public:
    vector<TreeNode*> ans;
    unordered_map<string,int> SubTreeEncoding;

    string preorder(TreeNode*&root){
        if(!root)
            return "N";

        string curr_s = to_string(root->val);
        string l = preorder(root->left);
        string r = preorder(root->right);
        string s = curr_s + "," + l  +  "," + r;

        if(SubTreeEncoding.find(s) != SubTreeEncoding.end()){
            if(SubTreeEncoding[s] == 1){
                ans.push_back(root);
            }
            SubTreeEncoding[s]++;
        }
        else{
            SubTreeEncoding[s]++;
        }
        return s;
    }

    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        preorder(root); 
        return ans;
    }
};
