class Solution {
public:

    int solveUsingRec(string &a,string &b, int i,int j){
        // base case
        if(i == a.length()){
            return 0;
        }
        if(j == b.length()){
            return 0;
        }


        // recursion logic
        int ans = 0;
        if(a[i] == b[j]){
            ans = 1 + solveUsingRec(a,b,i+1,j+1);
        }
        else{
            ans = 0 + max(solveUsingRec(a,b,i+1, j), solveUsingRec(a,b,i,j+1));
        }

        return ans;
    }
    

    int solveMem(string&a,string&b,int i,int j,vector<vector<int> >&dp){
        // base case
        if(i == a.length()){
            return 0;
        }
        if(j == b.length()){
            return 0;
        }

        if(dp[i][j] != -1)
            return dp[i][j];

        // recursion logic
        int ans = 0;
        if(a[i] == b[j]){
            ans = 1 + solveMem(a,b,i+1,j+1,dp);
        }
        else{
            ans = 0 + max(solveMem(a,b,i+1, j,dp), solveMem(a,b,i,j+1,dp));
        }

        dp[i][j] = ans;
        return dp[i][j];
    }             


    int solveTab(string&a,string&b) {
        vector<vector<int> > dp(a.length()+1,vector<int>(b.length()+1,0));

        for(int i = a.length()-1;i>=0;i--){
            for(int j = b.length()-1;j>=0;j--){
                int ans = 0;
                if(a[i] == b[j]){
                    ans = 1 + dp[i+1][j+1];
                }
                else{
                    ans = 0 + max(dp[i+1][j],dp[i][j+1]);
                }

                dp[i][j] = ans;
            }
        }
        return dp[0][0];
    }

    
    int solveTabSO(string&a,string&b) {
        // vector<vector<int> > dp(a.length()+1,vector<int>(b.length()+1,0));
        vector<int> next(b.length()+1,0);
        vector<int> curr(b.length()+1,0);

        for(int i = a.length()-1;i>=0;i--){
            for(int j = b.length()-1;j>=0;j--){
                int ans = 0;
                if(a[i] == b[j]){
                    ans = 1 + next[j+1];
                }
                else{
                    ans = 0 + max(next[j],curr[j+1]);
                }

                curr[j] = ans;
            }
            // shifting
            next = curr;
        }
        return curr[0];
    }


    int longestPalindromeSubseq(string s) {
        string first = s;
        reverse(s.begin(),s.end());
        string second = s;
        int i = 0, j = 0;
        // return solveUsingRec(first,second,i,j);

        // vector<vector<int> > dp(first.length(),vector<int>(second.length(),-1));
        // return solveMem(first,second,i,j,dp);

        // return solveTab(first,second);

        return solveTabSO(first,second);
    }
};
