class Solution {
public:

    int topdownDP(vector<int>&dp,int n){
        // B.C.
        if(n==0 || n==1)
            return n;
        // DP B.C.
        if(dp[n] != -1)
            return dp[n];

        dp[n] = topdownDP(dp,n-1) + topdownDP(dp,n-2);

        return dp[n];
    }

    int bottomUp(int n){
        if(n == 0)
            return n;
        if(n == 1)
            return n;

        vector<int> dp(n+1,-1);
        dp[0] = 0, dp[1] = 1;
        for(int i = 2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
    }

    int spaceOptSolve(int n){
        if(n == 0) return n;
        if(n == 1) return n;

        int prev2 = 0,prev1 = 1;
        int curr;

        for(int i = 2;i<=n;i++){
            curr = prev1+ prev2;
            prev2 = prev1;
            prev1 = curr;
        }

        return curr;
    }


    int fib(int n) {
        vector<int> dp(n+1,-1);
        // int ans = topdownDP(dp,n);
        // int ans = bottomUp(n);
        int ans = spaceOptSolve(n);

        return ans;
    }
};
